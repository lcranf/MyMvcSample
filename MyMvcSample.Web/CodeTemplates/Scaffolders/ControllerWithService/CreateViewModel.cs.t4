<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
using MyMvcSample.Common.Repository;
using MyMvcSample.Common.Service;
using MyMvcSample.Domain.Db;
using MyMvcSample.Domain.Entities;

namespace MyMvcSample.Controllers
{
  <#  
    var modelType = (CodeType)Model.ModelType;
    var modelName = modelType.Name;
    var possiblePrimaryKeys = new string[] { "Id", modelName + "Id" };
    var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
    var publicProperties = (IEnumerable)modelType.VisibleMembers().OfType<CodeProperty>()
                                                 .Where(prop =>
                                                        prop.Access == vsCMAccess.vsCMAccessPublic &&
                                                        prop.Getter != null &&
                                                        prop.Getter.Access == vsCMAccess.vsCMAccessPublic &&
                                                        !possiblePrimaryKeys.Contains(prop.Name));
    
  #>
    public class <#= modelName #>CreateModel
    {
        <# foreach(CodeProperty property in publicProperties) { #>

        public <#= property.Type.AsString #> <#= property.Name #> { get; <#= GetFunctionAsString(property.Setter) #> }
        <# } #>
    }
}

<#+
    string GetFunctionAsString(CodeFunction func) {        

        if(func == null) return "private set;";

        switch (func.Access)
        {		    
            case vsCMAccess.vsCMAccessPrivate:
              return "private set;";
              break;
            case vsCMAccess.vsCMAccessProject:
            case vsCMAccess.vsCMAccessProtected:
            case vsCMAccess.vsCMAccessDefault:
              return "protected set;";
              break;
            default:
              return "set;";
              break;
        }        
}
#>